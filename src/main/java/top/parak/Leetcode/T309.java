package top.parak.Leetcode;

/**
 * @author KHighness
 * @since 2021-05-25
 * @apiNote 309. 最佳买卖股票时机含冷冻期
 */

/**
 * Problem:
 * 给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​
 * 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
 * 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
 */
public class T309 {
    /**
     * 动态规划
     * 每天只可能有三种状态
     * (0) 不持股且当天没卖出  => dp[i][0]
     * (1) 持股              => dp[i][1]
     * (2) 不持股且当天卖出   => dp[i][2]
     * 初始化
     * dp[0[0] = 0          => 第0天啥也没干
     * dp[0[1] = -prices[0] => 第0天买入
     * dp[0[2] = 0          => 第0天买入卖出
     * 状态转移
     * (0) 第i天不持股且没卖出，要么昨天也不持股，要么昨天卖出
     * dp[i][0] = max(dp[i-1][0], dp[i - 1][2])
     * (1) 第i天持股，要么昨天已经持股，要么今天买入
     * dp[i][1] = max(dp[i-1][1], dp[i-1][0]-prices[i])
     * (2) 第i天持股且当天卖出，说明昨天一定持股
     * dp[i][2] = dp[i-1][1] + prices[i]
     * 最终结果一定是不持股的情况，即(0)和(2)
     */
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][3];
        dp[0][0] = 0;
        dp[0][1] -= prices[0];
        dp[0][2] = 0;
        for (int i = 1; i < n; i++) {
            // 不持股且不卖出，昨天持股OR昨天卖出
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][2]);
            // 持股，昨天持股OR今天买入
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
            // 持股且卖出
            dp[i][2] = dp[i - 1][1] + prices[i];
        }
        return Math.max(dp[n - 1][0], dp[n - 1][2]);
    }
}
